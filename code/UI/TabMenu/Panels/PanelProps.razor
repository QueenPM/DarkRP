@using Sandbox;
@using Sandbox.UI;
@using GameSystems;
@using GameSystems.Player;
@using System.Threading.Tasks;
@using Entity.Interactable.Props;
@using Entity.Interactable.Printer;
@using System.Text.RegularExpressions;
@inherits PanelComponent;
@attribute [StyleSheet( "../MenuStyle.scss" )]

<root>
<div class="section">
        <div class="section-title">Props  :  @PropManager?.PropCount() / @PropManager?.PropLimit</div>
        <div class="section-contents">
            <div class="info">

                <button class="button" style=" justify-content:center; margin-top:10px; margin-bottom:20px; background-color:maroon;" onclick=@RemoveAllProps>Remove all my props ( Press "Z" to undo props )</button>

                <div style="flex-direction: row; flex-wrap:wrap; ">
                @foreach (var Model in Props) // TODO :  add the thumbnail with the props name
                {
                    
                    string Propsname = Model.Name;

                    // Shitty workaround while I find the real model name ( need the thumbnail too)
                    var DisplayableName = Model.ResourceName;
                    DisplayableName = Regex.Replace(DisplayableName, @"0[1-99]", ""); 


                    <div style="padding:8px;">
                        <div class="button" onclick=@(() => SpawnProps(Propsname))>
                            <div style="padding:60px;">  @DisplayableName  </div>
                        </div>
                    </div>
                    
                }
                </div>

                <!-- this doesn't work yet, it's supposed to show cloud assets but I struggle a bit to understand their API -->
                @foreach (var Package in Packages)
                {

                    <div class="button" onclick=> @Package.Title </div>

                }

            </div>
        </div>
    </div>
</root>

@code {
    // List of Props 
    [Property] public List<Model> Props { get; set; }
    PropToolManager PropManager { get; set; }

    List<Package> Packages = new List<Package>();

    void SpawnProps(string modelname)
    {
        if (PropManager == null)
        {
            Log.Error("PropManager not found");
            return;
        }
        PropManager.SpawnProp(modelname);
    }

    void RemoveAllProps()
    {
        if (PropManager == null)
        {
            Log.Error("PropManager not found");
            return;
        }
        PropManager.RemoveAllProps();
    }
}