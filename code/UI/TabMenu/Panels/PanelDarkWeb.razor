@using Sandbox;
@using Sandbox.UI;
@using GameSystems;
@using GameSystems.Player;
@using Entity.Interactable.Props;
@using Entity.Interactable.Printer;
@using TabMenu;

<root style="width: 100%;">
  <div class="section">
      <div class="section-title">Dark Web</div>
      <div class="section-contents">
          <div class="button" onclick=@(() => BuyPrinter(PrinterType.Bronze, 500))>
              <div class="icon" style="background-color: #A52A2A"></div>
              <div class="label-container">
                  <div class="label">Bronze Printer</div>
                  <span class="description">@CurrentPrinter / @MaxPrinter</span>
                  <span class="description">Slow</span>
                  <div class="price">$500</div>
              </div>
          </div>

          <div class="button" onclick=@(() => BuyPrinter(PrinterType.Silver, 1200))>
              <div class="icon" style="background-color: #DCDCDC"></div>
              <div class="label-container">
                  <div class="label">Silver Printer</div>
                  <span class="description">@CurrentPrinter / @MaxPrinter</span>
                  <span class="description">Average</span>
                  <div class="price">$1,200</div>
              </div>
          </div>

          <div class="button" onclick=@(() => BuyPrinter(PrinterType.Gold, 2600))>
              <div class="icon" style="background-color: #FFD700"></div>
              <div class="label-container">
                  <div class="label">Gold Printer</div>
                  <span class="description">@CurrentPrinter / @MaxPrinter</span>
                  <span class="description">Fast</span>
                  <div class="price">$2,600</div>
              </div>
          </div>

          <div class="button" onclick=@(() => BuyPrinter(PrinterType.Diamond, 4200))>
              <div class="icon" style="background-color: #40E0D0"></div>
              <div class="label-container">
                  <div class="label">Diamond Printer</div>
                  <span class="description">@CurrentPrinter / @MaxPrinter</span>
                  <span class="description">Super-fast</span>
                  <div class="price">$4,200</div>
              </div>
          </div>
      </div>
    </div>
</root>

@code {
    public PanelData PanelData { get; set; }
    public GameObject Player { get; set; }
    int MaxPrinter = 5;
    int CurrentPrinter = 0;
    enum PrinterType { Bronze, Silver, Gold, Diamond }

	protected override void OnAfterTreeRender(bool firstTime)
	{
		base.OnAfterTreeRender(firstTime);
        if (firstTime)
        {
            Player = PanelData.PlayerPrefab;
            if ( Player is null )
            {
                Log.Warning("Player prefab is null");
            }
        }
	}

    // Generic method to purchase a printer
    void BuyPrinter(PrinterType type, float price)
    {
        if (CurrentPrinter >= MaxPrinter)
        {
            Sound.Play("audio/error.sound");
            return;
        }

        var playerStats = PanelData.PlayerPrefab.Components.Get<Stats>();
        if (!playerStats.RemoveMoney(price))
        {
            return; // Not enough money, error sound is handled elsewhere
        }

        Vector3 playerPos = Player.Parent.Transform.World.Position + Player.Parent.Transform.Local.Forward * 50;
        GameObject printer = PanelData.PrinterPrefab.Clone(playerPos);

        // Set the printer type directly using a mapping if needed
        printer.Components.Get<PrinterLogic>().SetPrinterType((PrinterLogic.PrinterType)type);

        printer.NetworkSpawn(); // It spawns on all clients
        CurrentPrinter++;
    }
}