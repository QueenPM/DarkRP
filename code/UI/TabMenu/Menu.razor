@using Sandbox;
@using Sandbox.UI;
@using GameSystems;
@using GameSystems.Player;
@using System.Threading.Tasks;
@using Entity.Interactable.Props;
@using Entity.Interactable.Printer;
@using System.Text.RegularExpressions;
@using TabMenu;
@inherits PanelComponent;
@attribute [StyleSheet( "/UI/TabMenu/SharedStyles.scss" )]
<root>
    <div class="title">Tab Menu</div>
    <!-- TODO this should be modularized -->
    <div class="main">
        <div class="side-bar">
            <div class="player-container">
                <div class="name">@(Rpc.Caller.DisplayName.Truncate(13))</div>
                @* <div class="wallet">$@(PlayerPrefab.Components.Get<Stats>().MoneyBase.ToString("N0"))</div
                <div class="sub">Salary:<span>$@(PlayerPrefab.Components.Get<Stats>().SalaryAmmount.ToString("N0"))</span></div> *@
            </div>
            <div class="navigation">
                <div class="buttoncontainer">
                    <button class="button @(CurrentPanel == Panel.Jobs ? "active" : "")" onclick=@(()=>ChangePage(Panel.Jobs))> <i class="icon">work</i> Jobs </button>
                    <button class="button @(CurrentPanel == Panel.DarkWeb ? "active" : "")" onclick=@(()=>ChangePage(Panel.DarkWeb))> <i class="icon">store</i> Dark Web </button>
                    <button class="button @(CurrentPanel == Panel.Props ? "active" : "")" onclick=@(()=>ChangePage(Panel.Props))> <i class="icon">folder</i> Props </button> 
                </div>
                <div class="buttoncontainer">
                    <button class="button @(CurrentPanel == Panel.Admin ? "active" : "")" onclick=@(()=>ChangePanel("admin"))> <i class="icon">local_police</i> Admin Tools </button>
                    <button class="button @(CurrentPanel == Panel.Info ? "active" : "")" onclick=@(()=>ChangePage(Panel.Info))> <i class="icon">info</i> Information </button>
                    <button class="button" onclick=@GitHubLink style="color:#4078c0;"> <i class="icon">web</i> @GitHub </button>
                    <button class="button" onclick=@DiscordLink style="color:#7289da;"> <i class="icon">discord</i> @Discord </button>
                </div>
            </div>
        </div>
        <div class="main-container">
            <!-- Dark Web Section -->
            @if ( CurrentPanel == Panel.DarkWeb){
                <PanelDarkWeb />
                return;
            }
            <!-- Jobs Section -->
            @if ( CurrentPanel == Panel.Jobs){
                <PanelJobs />
                return;
            }
            <!-- Props Section -->
            @if ( CurrentPanel == Panel.Props){
                <PanelProps />
                return;
            }
            @* <!-- Admin Section -->
            @if ( CurrentPanel == Panel.Admin){
                <PanelAdmin />
                return;
            } *@
            <!-- Info Section -->
            @if ( CurrentPanel == Panel.Info){
                <PanelInfo />
                return;
            }
        </div>
    </div>
</root>

@code
{

    [Property] public Dictionary<string, PanelComponent> Panels { get; set; } = new Dictionary<string, PanelComponent>();
    [Property] public PanelComponent OpenedPanelComponent { get; set; }
    enum Panel {
        DarkWeb,
        Jobs,
        Info,
        Admin,
        Props
    }

    [Property] private Panel CurrentPanel = Panel.Info;

    // Printer Prefab Reference
    [Property] GameObject PrinterPrefab { get; set; } 

    // PlayerConnObjectConnObject Prefab Reference
    [Property] GameObject PlayerPrefab { get; set; } 
    private static PanelData PanelData { get; set; }

    // The string used to query for packages 
    public string Query { get; set; } = "QuerryPlaceholder"; 

    // A list of found packages 
    List<Package> Packages = new List<Package>();

    // doesn't work yet ( I need to figure out their API to understand how to get a list of cloud Assets)
    public async Task FindPackage()
    {
        var found = await Package.FindAsync(Query);
        if (found != null)
        {
            Packages.AddRange(found.Packages);
        }
    }

    protected override async void OnStart()
    {
        await FindPackage();

        // Disable all panel elements if they arnt already
        @* foreach (var panel in Panels)
        {
            panel.Value.Enabled = false;
        } *@
    }
    void ChangePage(Panel page)
    {
        CurrentPanel = page;
        Sound.Play("audio/select.sound");
    }

    void ChangePanel(string panelName)
    {
        if ( Panels.TryGetValue(panelName, out var panel))
        {
            // If its the same panel, do nothing
            if ( OpenedPanelComponent == panel) return;
            // Close the current panel
            if ( OpenedPanelComponent is not null) OpenedPanelComponent.Enabled = false;

            // Open the new panel
            OpenedPanelComponent = panel;
            panel.Enabled = true;
            Sound.Play("audio/select.sound");
        }
    }

    // Discord and Github string
    string Discord = "Discord";
    string GitHub = "GitHub";

    async void DiscordLink() { 
        Sound.Play("audio/select.sound");
        try{
            Clipboard.SetText("https://discord.gg/yBDk9Xr6VB");
            Discord = "Discord - Copied!";
            await Task.Delay(1500);
            Discord = "Discord";
            StateHasChanged();
        }catch{
            Log.Error("Failed to copy to clipboard");
        }
    }


    async void GitHubLink() { 
        Sound.Play("audio/select.sound");
        try{
            Clipboard.SetText("https://github.com/sousou63/DarkRP");
            GitHub = "GitHub - Copied!";
            await Task.Delay(1500);
            GitHub = "GitHub";
            StateHasChanged();
        }catch{
            Log.Error("Failed to copy to clipboard");
        }
    }
    /// <summary>
    /// The BuildHash method determines if the system should be rebuilt.
    /// If it changes, the system will be rebuilt.
    /// </summary>
    @* protected override int BuildHash() => System.HashCode.Combine(InfoDone, InfoTodo, InfoNotes); *@
}
