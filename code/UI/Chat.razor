@using Sandbox;
@using Sandbox.UI;
@using System;
@inherits PanelComponent
@implements Component.INetworkListener

<root>
    @if (ChatOpen == true)
    {
        <div class="header">
            Chat
        </div>
    }
	<div class="output">
		@foreach (var entry in Entries)
        {
            // Only show the messages from the last 10 seconds, or all if the input box is focused
            @if (entry.timeSinceAdded < 10f || ChatOpen)
            {
                <div class="chat_entry">
                    <div class="timestamp">@entry.timestamp</div>
                    @if (entry.steamid > 0)
                    {
                        <div class="avatar" style="background-image: url( avatar:@entry.steamid )"></div>
                    }
                    <div class="author">@entry.author</div>
                    <text class="message">@entry.message</text>
                </div>
            }
        }
	</div>

    <div class="input">
        <TextEntry style="width:100%;" MaxLength=@(150) @ref="InputBox" onsubmit="@ChatFinished"></TextEntry>
    </div>
</root>

@code
{
    TextEntry InputBox;
    bool ChatOpen = false;
    public record Entry(ulong steamid, string author, string message, RealTimeSince timeSinceAdded)
    {
        public bool IsNew { get; set; } = true;
        public string timestamp { get; set; } = DateTime.Now.ToString("HH:mm:ss");
    }
    List<Entry> Entries = new();

    protected override void OnUpdate()
    {
        if (InputBox is null)
            return;

        Panel.AcceptsFocus = false;

        if ( Input.Pressed( "chat" ) )
        {
            ToggleChat(true);
        }

        // Clear the "new" flag after 10 seconds. This is to make sure we don't update chat state every frame
        foreach (var entry in Entries.Where(e => e.IsNew && e.timeSinceAdded > 10.0f))
        {
            entry.IsNew = false;
            StateHasChanged();
        }
    }

    void ToggleChat(bool open)
    {
        ChatOpen = open;
        if (ChatOpen)
        {
            InputBox.Focus();
            InputBox.Placeholder = "Type /help for commands";
        }else {
            InputBox.Placeholder = "";
        }
        SetClass( "open", open );
        StateHasChanged();
    }

    void ChatFinished()
    {
        ToggleChat(false);
        var text = InputBox.Text;
        InputBox.Text = "";

        if (string.IsNullOrWhiteSpace(text))
            return;

        if ( CheckCommand(text) == true) return;
        AddText( text );
    }

    [Broadcast]
    public void AddText( string message, bool clientOnly = false )
    {
        // Return if it's a client-only message and the caller isn't the local client
        if (clientOnly && Rpc.Caller != Connection.Local) return;
        
        message = message.Truncate( 300 );

        if (string.IsNullOrWhiteSpace(message))
            return;

        var author = Rpc.Caller.DisplayName;
        var steamid = Rpc.Caller.SteamId;

		Log.Info($"{author}: {message}");

        if (Entries.Count > 30)
        {
            Entries.RemoveAt(0);
        }
        Entries.Add(new Entry(steamid, author, message, 0.0f));
		StateHasChanged();
	}

    [Broadcast] // todo: only from host/owner
    public void AddSystemText( string message, bool clientOnly = false)
    {
        // Return if it's a client-only message and the caller isn't the local client
        if (clientOnly && Rpc.Caller != Connection.Local) return;

        message = message.Truncate(300);

        if (string.IsNullOrWhiteSpace(message))
            return;

        Entries.Add(new Entry(0, "ℹ️", message, 0.0f));
        StateHasChanged();
    }

	void Component.INetworkListener.OnConnected( Connection channel )
	{
		if ( IsProxy ) return;

		AddSystemText( $"{channel.DisplayName} has joined the game" );
	}

	void Component.INetworkListener.OnDisconnected( Connection channel )
	{
		if ( IsProxy ) return;

		AddSystemText( $"{channel.DisplayName} has left the game" );
	}

    // Super basic commands for now. Expand later for more.
    // TODO Move this to a separate class & make it more extensible
    public bool CheckCommand(string message)
    {
        if (message.StartsWith("/"))
        {
            var parts = message.Split(" ");
            var command = parts[0].Substring(1).ToLower();
            var args = parts.Skip(1).ToArray();

            switch (command)
            {
                case "help":
                    AddSystemText("Available commands: /help, /clear, /lorem [count]", true);
                    return true;
                case "clear":
                    Entries.Clear();
                    AddSystemText("Chat has been cleared", true);
                    return true;
                case "lorem":
                    // Loop X times for args 1
                    var count = 1;
                    if (args.Length > 0)
                    {
                        if (!int.TryParse(args[0], out count))
                        {
                            AddText("Invalid argument: " + args[0], true);
                            return true;
                        }
                    }
                    if (count > 10)
                    {
                        AddSystemText("You can only generate up to 10 lorem ipsum messages at a time", true);
                        return true;
                    }

                    for (var i = 0; i < count; i++)
                    {
                        AddText("Lorem ipsum dolor sit amet, consectetur adipiscing elit.", true);
                    }
                    return true;
                default:
                    AddSystemText($"Unknown command: {command}");
                    return true;
            }
        }

        return false;
    }
}
