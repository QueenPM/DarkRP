@using Sandbox;
@using Sandbox.UI;
@inherits PanelComponent

<root>
    <!-- Dark Web Section -->
    <div class="section">
        <div class="section-title">Dark Web</div>
        <div class="section-contents">
            <div class="button" onclick=@(() => BuyPrinter(PrinterType.Bronze, 500))>
                <div class="icon"></div>
                <div class="label-container">
                    <div class="label">Bronze Printer</div>
                    <span class="description">@CurrentPrinter / @MaxPrinter</span>
                    <div class="price">$500</div>
                </div>
            </div>
            <div class="button" onclick=@(() => BuyPrinter(PrinterType.Silver, 1200))>
                <div class="icon"></div>
                <div class="label-container">
                    <div class="label">Silver Printer</div>
                    <span class="description">@CurrentPrinter / @MaxPrinter</span>
                    <div class="price">$1200</div>
                </div>
            </div>
            <div class="button" onclick=@(() => BuyPrinter(PrinterType.Gold, 2600))>
                <div class="icon"></div>
                <div class="label-container">
                    <div class="label">Gold Printer</div>
                    <span class="description">@CurrentPrinter / @MaxPrinter</span>
                    <div class="price">$2600</div>
                </div>
            </div>
            <div class="button" onclick=@(() => BuyPrinter(PrinterType.Diamond, 4200))>
                <div class="icon"></div>
                <div class="label-container">
                    <div class="label">Diamond Printer</div>
                    <span class="description">@CurrentPrinter / @MaxPrinter</span>
                    <div class="price">$4200</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Jobs Section -->
    <div class="section">
        <div class="section-title">Jobs</div>
        <div class="section-contents">
            @foreach (var job in new int[] { 1, 2, 3, 4, 5, 6, 7, 8 })
            {
                <div class="button">
                    <div class="icon"></div>
                    <div class="label-container">
                        <div class="label">Job @job</div>
                        <div class="description">Job @job description</div>
                    </div>
                </div>
            }
        </div>
    </div>

    <!-- Information Section -->
    <div class="section">
        <div class="section-title">Information</div>
        <div class="section-contents">
            <div class="info" style="color: limegreen;">
                <h1>Completed</h1>
                <p>@InfoDone</p>
            </div>
            <div class="info" style="color: red;">
                <h1>TODO</h1>
                <p>@InfoTodo</p>
            </div>
            <div class="info" style="color: yellow;">
                <h1>Notes</h1>
                <p>@InfoNotes</p>
            </div>
            <div class="info" style="color: white;">
                <h1>Credits</h1>
                <p>@InfoCredits</p>
            </div>
        </div>
    </div>
</root>

@code
{
    [Property] GameObject PrinterPrefab { get; set; } // Printer Prefab Reference
    [Property] GameObject PlayerPrefab { get; set; } // Player Prefab Reference

    [Property, TextArea] public string InfoDone { get; set; } = "Hello World!";
    [Property, TextArea] public string InfoTodo { get; set; } = "Hello World!";
    [Property, TextArea] public string InfoNotes { get; set; } = "Hello World!";
    [Property, TextArea] public string InfoCredits { get; set; } = "Hello World!";

    int MaxPrinter = 2;
    int CurrentPrinter = 0;

    // Enum to represent different types of printers
    enum PrinterType {Bronze,Silver,Gold,Diamond}

    // Generic method to purchase a printer
    void BuyPrinter(PrinterType type, float price)
    {
        // Check if we can add another printer
        if (CurrentPrinter < MaxPrinter)
        {
            // Try to remove money first ( RemoveMoney() is a function in the PlayerStats Component )
            bool hasEnoughMoney = PlayerPrefab.Components.Get<PlayerStats>().RemoveMoney(price);

            if (hasEnoughMoney)
            {
                Vector3 Offset = GameObject.Parent.Transform.Local.Forward;
                Vector3 PlayerPos = GameObject.Parent.Transform.World.Position + Offset * 50;
                GameObject Printer = PrinterPrefab.Clone(PlayerPos);

                // Get PrinterLogic component
                var printerLogic = Printer.Components.Get<PrinterLogic>();

                // Assign the color based on the printer type
                switch (type)
                {
                    case PrinterType.Bronze:
                        printerLogic.SetPrinterType(PrinterLogic.PrinterType.Bronze);
                        break;
                    case PrinterType.Silver:
                        printerLogic.SetPrinterType(PrinterLogic.PrinterType.Silver);
                        break;
                    case PrinterType.Gold:
                        printerLogic.SetPrinterType(PrinterLogic.PrinterType.Gold);
                        break;
                    case PrinterType.Diamond:
                        printerLogic.SetPrinterType(PrinterLogic.PrinterType.Diamond);
                        break;
                }

                Printer.NetworkSpawn();  // It spawns on all clients
                CurrentPrinter++;
            }
            else
            {
                // Not enough money
                Sound.Play("error.sound");
            }
        }
        else
        {
            // Max printers reached
            Sound.Play("error.sound");
        }
    }

    /// <summary>
    /// The BuildHash method determines if the system should be rebuilt.
    /// If it changes, the system will be rebuilt.
    /// </summary>
    protected override int BuildHash() => System.HashCode.Combine(InfoDone, InfoTodo, InfoNotes);
}
